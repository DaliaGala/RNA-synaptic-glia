---
title: "Incorporate FCA data"
format: html
editor_options: 
  chunk_output_type: console
---

## Environment

```{r}
library(SCopeLoomR)
library(tidyverse)
library(qs)
library(skimr)
library(ggbeeswarm)
library(colorspace)
library(ggridges)
library(furrr)
library(patchwork)

plan(multisession, workers = 4)
```

## Read glia loom from FCA

```{r}
## Open connection to loom
loom_path <- "~/Downloads/s_fca_biohub_glial_cell_10x.loom"
loom <- open_loom(loom_path)
loom

## Get dgem dataframe
dgem <- get_dgem(loom)
dgem_tidy <- dgem %>%
  as.data.frame() %>%
  rownames_to_column(var = "gene_name") %>%
  pivot_longer(-gene_name, 
               names_to = "cell_id",
               values_to = "dgem") 

## Get cell annotations and embeddings 
embeddings <- get_embeddings(loom) %>%
  imap_dfc(~ pluck(.x) %>% 
            as.data.frame() %>%
            setNames(c(paste0(.y, "_x"), paste0(.y, "_y")))) %>%
  rownames_to_column(var = "cell_id") %>%
  janitor::clean_names()

cell_anno <- get_cell_annotation(loom) %>%
  rownames_to_column(var = "cell_id") %>%
  left_join(embeddings, by = "cell_id") %>%
  dplyr::select(cell_id, age, annotation, annotation__ontology_id, n_counts, n_genes, percent_mito, sex, tissue, contains("hvg"))

cell_anno_summary <- cell_anno %>%
  dplyr::select(annotation, annotation__ontology_id) %>%
  group_by(annotation, annotation__ontology_id) %>%
  summarise(n_cell = n()) 
```

## Filter glia-annotated cells only 

```{r}
## Glia annotations to keep
glia_anno <- c(
  "adult antenna glial cell",
  "adult brain cell body glial cell",
  "adult brain perineurial glial cell",
  "adult glial cell",
  "adult lamina epithelial/marginal glial cell",
  "adult optic chiasma glial cell",
  "adult reticular neuropil associated glial cell",
  "cell body glial cell",
  "CNS surface associated glial cell",
  "ensheathing glial cell",
  "optic-lobe-associated cortex glial cell",
  "perineurial glial sheath",
  "peripheral glial cell",
  "subperineurial glial cell"
)

## Filter and get pure-glia data
all_glia_cell_anno <- filter(cell_anno, annotation %in% glia_anno)
all_glia_cell_ids <- pull(all_glia_cell_anno, cell_id)
all_glia_dgem <- filter(dgem_tidy, cell_id %in% all_glia_cell_ids)
# qsave(all_glia_dgem, "~/Downloads/all_glia_dgem.qs")

rm(dgem, dgem_tidy, embeddings, cell_anno, cell_anno_summary)

all_glia_dgem_by_gene <- all_glia_dgem %>%
  group_by(gene_name) %>%
  summarise(n_exp_cell = sum(dgem > 0),
            sum_dgem = sum(dgem)) %>%
  ungroup() %>%
  mutate(pct_exp_cell = (n_exp_cell / length(unique(all_glia_dgem$cell_id))) * 100) %>%
  mutate(exp_level_within_expressing_cell = sum_dgem / n_exp_cell) 
```

## Plot glia cell type counts and their t-SNE

```{r}
## Cell counts per glia type
all_glia_cell_anno %>%
  group_by(annotation) %>%
  summarise(cell_count = n()) %>%
  ggplot(aes(x = annotation, y = cell_count, fill = annotation)) + 
  geom_col() + 
  geom_label(aes(x = annotation, y = cell_count + 100, label = cell_count),
             inherit.aes = FALSE) + 
  labs(title = paste0("Annotated glia cell types (total n = ", nrow(all_glia_cell_anno), " cells)"),
       subtitle = "Fly cell atlas - single-nucleus RNA-seq",
       x = "",
       y = "Cell count") + 
  scale_fill_viridis_d() +
  theme_gray(base_size = 12) +
  theme(legend.position = "none") +
  coord_flip()

ggsave("./RNAseq/plots/snRNA-seq_glia-subtype_cellcount.pdf", width = 8.5, height = 6)

## Gene counts per glia type
all_glia_cell_anno %>%
  ggplot(aes(x = annotation, y = n_genes, colour = annotation)) +
  geom_quasirandom(size = 1, alpha = 0.3, stroke = 0) +
  scale_colour_viridis_d() +
  labs(title = "Number of genes detected per cell",
       subtitle = "Fly cell atlas - single-nucleus RNA-seq",
       x = "",
       y = "Gene count") + 
  theme_gray(base_size = 12) +
  theme(legend.position = "none") +
  coord_flip() +
  geom_quasirandom(aes(x = "TOTAL", y = n_genes),
                   size = 1, alpha = 0.3)

ggsave("./RNAseq/plots/snRNA-seq_glia-subtype_genecount.pdf", width = 7.5, height = 6)


## t-SNE of glia type
all_glia_cell_anno %>%
  ggplot(aes(x = hvg_t_sne_x,
             y = hvg_t_sne_y,
             colour = annotation)) +
  labs(title = "Annotated glia cell types - adult fly (t-SNE)",
       subtitle = "Fly cell atlas - single-nucleus RNA-seq",
       colour = "") + 
  geom_point(alpha = 0.8, size = 1, stroke = 0) +
  # scale_colour_discrete_qualitative(palette = "Dark 3") +
  scale_colour_viridis_d() +
  theme_void(base_size = 12) +
  theme(legend.position = "none")

ggsave("./RNAseq/plots/snRNA-seq_glia-tsne_total.pdf", width = 6, height = 6)

```

## Plot gene expression in all-glia 

```{r}
## t-SNE plot
plot_gene_tsne <- function(gene, palette, limit_counts){
  counts <- all_glia_dgem %>% filter(gene_name == gene)
  df <- left_join(all_glia_cell_anno, counts, by = "cell_id") %>%
    mutate(count = ifelse(dgem == 0, NA, dgem))
  ggplot(df, aes(x = hvg_t_sne_x, y = hvg_t_sne_y, colour = count)) +
    geom_point(size = 1, alpha = 0.9, stroke = 0) +
    labs(title = paste0(gene, " expression"),
         subtitle = "Fly cell atlas - single-nucleus RNA-seq") + 
    # scale_colour_gradientn(colours = c("gray90", "gray90", palette),
    #                        values = c(0, 0.1, 1),
    #                        limits = c(0, limit_counts)) +
    scale_colour_gradient(low = "gray50", high = palette, na.value = "gray80",
                        limits = c(0, limit_counts),
                        oob = scales::squish) +
    theme_void(base_size = 15) +
    theme(legend.position = "bottom")
}

plot_gene_tsne("DIP-lambda", "red", 8)

# septate_junction_gene_names <- read.delim(pipe("pbpaste"), col.names = "genes") %>% pull(genes)
# map(septate_junction_gene_names, ~
#       if(.x %in% all_glia_dgem_by_gene$gene_name){
#         plot_gene_tsne(.x, "red", 2)
#       } else {
#         mtcars %>% ggplot(aes(x = cyl, y = cyl)) + labs(title = .x)
#       }) %>% wrap_plots()
# ggsave("~/Desktop/test.jpg", width = 30, height = 35)

## Ridge plot
plot_gene_ridge <- function(gene){
  counts <- all_glia_dgem %>% filter(gene_name == gene)
  df <- left_join(all_glia_cell_anno, counts, by = "cell_id")
  ggplot(df, aes(x = log2(dgem + 1), y = annotation, fill = annotation)) + 
    geom_density_ridges() + 
    labs(title = paste0(gene, " expression in glial cell types"),
         subtitle = "Fly cell atlas - single-nucleus RNA-seq",
         x = "RNA expression: log2(CPM+1)", y = "") +
    scale_fill_viridis_d() +
    # scale_x_continuous(trans = "log2") + 
    theme_classic(base_size = 15) +
    theme(legend.position = "none")
}

plot_gene_ridge("Mdr65")

```

## Explore thresholds

```{r}
explore_threshold <- seq(0, 100, by = 0.1) %>% set_names() %>%
  map_dfr(~ tibble(gene_count = all_glia_dgem_by_gene %>%
                     filter(pct_exp_cell >= .x) %>% nrow()), .id = "threshold_pct")
explore_threshold %>%
  ggplot(aes(x = as.numeric(threshold_pct), y = gene_count, group = "hi")) + 
  geom_line() +
  coord_cartesian(xlim = c(0, 10))
```

## Glial subtype summary

```{r}
## Get dgem summary per glia subtype
glia_type_dgem_by_gene <- glia_anno %>%
  set_names() %>%
  map_dfr(function(x){
    cell_type_id <- filter(all_glia_cell_anno, annotation == x) %>% pull(cell_id)
    filter(all_glia_dgem, cell_id %in% cell_type_id) %>%
      group_by(gene_name) %>%
      summarise(n_exp_cell = sum(dgem > 0),
                sum_dgem = sum(dgem)) %>%
      ungroup() %>%
      mutate(pct_exp_cell = (n_exp_cell / length(cell_type_id)) * 100) %>%
      mutate(exp_level_within_expressing_cell = sum_dgem / n_exp_cell) %>%
      mutate(glia_cell_type = x)
  }) %>%
  bind_rows(mutate(all_glia_dgem_by_gene, glia_cell_type = "Total"))

# qsave(glia_type_dgem_by_gene, "~/Google Drive/glia_type_dgem_by_gene.qs") 
# glia_type_dgem_by_gene <- qread("~/Google Drive/glia_type_dgem_by_gene.qs")

## Plot percentage of cells within glia subtype expressing certain gene
plot_gene_subtype <- function(gene){
  df <- glia_type_dgem_by_gene %>%
    filter(gene_name == gene)
    ggplot(df, aes(x = glia_cell_type, y = pct_exp_cell, fill = glia_cell_type)) + 
    geom_col(width = 0.7) + 
      geom_hline(yintercept = filter(df, glia_cell_type == "Total") %>% pull(pct_exp_cell), 
                 linetype = "dashed", colour = "gray50") + 
    geom_label(aes(x = glia_cell_type, y = pct_exp_cell + 2, label = paste0(round(pct_exp_cell, digits = 0), "%")),
               inherit.aes = FALSE) + 
    labs(title = paste0("Percentage of glial subtype cells expressing ", gene),
         subtitle = "Fly cell atlas - single-nucleus RNA-seq",
         x = "",
         y = "Percentage") + 
    scale_fill_viridis_d() +
    theme_gray(base_size = 12) +
    theme(legend.position = "none") +
    coord_flip(ylim = c(0, 100))
}

plot_gene_subtype("pros")

glia_type_dgem_by_gene %>%
  group_by(glia_cell_type) %>%
  summarise(n_transcriptome = sum(pct_exp_cell >= 5)) %>% ungroup() %>%
  # filter(glia_cell_type != "Total") %>%
  ggplot(aes(x = glia_cell_type, y = n_transcriptome, fill = glia_cell_type)) + 
  geom_col(width = 0.7) + 
  geom_label(aes(x = glia_cell_type, y = n_transcriptome + 2, label = n_transcriptome),
             inherit.aes = FALSE) + 
  labs(title = paste0("Number of genes expressed by glial subtype"),
       subtitle = "Fly cell atlas - single-nucleus RNA-seq",
       x = "",
       y = "Gene count") + 
  scale_fill_viridis_d() +
  theme_gray(base_size = 12) +
  theme(legend.position = "none") + 
  coord_flip()

```

## Merge with localisation data

```{r}
##
df_raw_merge <- qread("./data/glia_localised_RNA_dmel.qs")

## 
plot_fca_support <- function(glia_cell_type, pct_cutoff){
  glia_type_transcriptome_names_5 <- glia_anno %>%
    set_names() %>%
    map(~glia_type_dgem_by_gene %>%
          filter(glia_cell_type == .x) %>%
          filter(pct_exp_cell >= pct_cutoff) %>%
          pull(gene_name)
    )
  total_gene_names_from_5 <- list("Total" = unlist(glia_type_transcriptome_names_5) %>% unique())
  glia_type_transcriptome_names_5 <- c(total_gene_names_from_5, glia_type_transcriptome_names_5)
  names(glia_type_transcriptome_names_5)
  
  ##
  namespace <- df_raw_merge %>% pull(dmel_gene_name) 
  expression <- glia_type_transcriptome_names_5 %>%
    imap_dfc(~ tibble(col = namespace %in% .x) %>% setNames(.y)) %>%
    bind_cols(tibble(dmel_gene_name = namespace))
  
  df_localised_FCA <- left_join(df_raw_merge, expression) %>%
    mutate(rna_present = if_else(rna_in_protrusion >= 8, TRUE, FALSE)) %>%
    mutate(translation_present = if_else(translation_in_protrusion >= 4, TRUE, FALSE)) %>%
    mutate(rna_and_translation_present = if_else(rna_in_protrusion >= 8 & translation_in_protrusion >= 4, TRUE, FALSE)) %>%
    mutate(transcript_enriched = if_else(enriched_in_protrusion >= 3, TRUE, FALSE)) %>%
    mutate(translation_enriched = if_else(enhanced_translation_in_protrusion >= 3, TRUE, FALSE)) %>%
    mutate(transcription_and_translation_enriched = if_else(enriched_in_protrusion >= 3 & enhanced_translation_in_protrusion >= 3, TRUE, FALSE))
  
  index <- c("rna_present", "translation_present", "rna_and_translation_present", "transcript_enriched", "translation_enriched", "transcription_and_translation_enriched") %>% set_names()
  
  FCA_supported_genes_summary <- index %>%
    imap_dfr(~
               tibble(
                 localisation_type = c(.y, .y),
                 type = c("potentially localised", "FCA supported"),
                 gene_count = c(
                   pull(df_localised_FCA, !!sym(.x)) %>% sum(na.rm = TRUE),
                   filter(df_localised_FCA, !!sym(glia_cell_type) == TRUE) 
                   %>% pull(!!sym(.x)) %>% sum(na.rm = TRUE)
                 )
               )
    )
  
  plot <- FCA_supported_genes_summary %>%
    mutate(localisation_type = fct_relevel(localisation_type, rev(index))) %>%
    ggplot(aes(x = localisation_type, y = gene_count, fill = type)) +
    geom_col(position = position_dodge(width = 0.8), width = 0.7) +
    geom_label(aes(x = localisation_type, y = gene_count + 100, label = gene_count, group = type),
               position = position_dodge(width = 0.8), inherit.aes = FALSE) + 
    labs(title = "Glia-localised mouse RNAs → Fly homologs. Are they FCA supported?",
         subtitle = paste0("In ", glia_cell_type, " type + Expressed in at least ", pct_cutoff, "% of cells"),
         x = "",
         y = "Gene count",
         fill = "") + 
    scale_fill_manual(values = c("sandybrown", "gray70")) + 
    theme_minimal(base_size = 12) + 
    theme(legend.position = "bottom") + 
    coord_flip()
  
  return(list(df_localised_FCA, plot))
}

##
df_localised_FCA <- plot_fca_support("Total", 2.5)[[1]]
plot_fca_support("Total", 2.5)[[2]]


df_localised_FCA %>% 
  filter(`subperineurial glial cell` == TRUE) %>%
  arrange(desc(mean_rna_enrichment_l2fc)) %>%
  pull(dmel_gene_name) %>% head(50)



```

## Create gene list table for Ilan

```{r}
df_localised_FCA_supported <- filter(df_localised_FCA, Total == TRUE)

df_localised_FCA %>%
  filter(rna_in_protrusion >= 8) %>% pull(Total) %>% sum(na.rm = TRUE)

## Get each categories 
df_rna_present <- df_localised_FCA_supported %>% 
  filter(rna_in_protrusion >= 8) %>% as_tibble()
df_translation_present <- df_localised_FCA_supported %>%
  filter(translation_in_protrusion >= 4) %>% as_tibble()
df_rna_and_translation_present <- df_localised_FCA_supported %>%
  filter(rna_in_protrusion >= 8 & translation_in_protrusion >= 4) %>% as_tibble()
df_transcript_enriched <- df_localised_FCA_supported %>%
  filter(enriched_in_protrusion >= 3) %>% as_tibble()
df_translation_enriched <- df_localised_FCA_supported %>%
  filter(enhanced_translation_in_protrusion >= 3) %>% as_tibble()
df_enriched_transcription_and_translation <- df_localised_FCA_supported %>%
  filter(enriched_in_protrusion >= 3 & enhanced_translation_in_protrusion >= 3) %>% as_tibble()

overview_df <- tibble(
  glial_protrusion_category = c("Transcript present (8 of 12)", 
               "Translation present (4 of 4)", 
               "Transcript and translation both present",
               "Transcript enriched (3 of 4)", 
               "Translation enriched (3 of 4)",
               "Transcript and translation both enriched"),
  dfs = list(
    df_rna_present,
    df_translation_present,
    df_rna_and_translation_present,
    df_transcript_enriched,
    df_translation_enriched,
    df_enriched_transcription_and_translation
  )
)

filter_go_terms <- function(df, search_term){
  df %>% 
    dplyr::filter(
      str_detect(go_biological_process, search_term) |
        str_detect(go_molecular_function, search_term) |
        str_detect(go_cellular_component, search_term)
      )
}

get_gene_names <- function(x){
  x %>% pull(dmel_gene_name) %>% paste0(collapse = ", ")
}

count_df <- overview_df %>%
  mutate(total_fly_gene_count = map_dbl(dfs, ~ nrow(.x))) %>%
  mutate(SFARI = map_dbl(dfs, ~ filter(.x, sfari_dmel == TRUE) %>% nrow())) %>%
  mutate(RNA_binding = map_dbl(dfs, ~ filter_go_terms(.x, "RNA binding") %>% nrow())) %>%
  mutate(RNA_stability = map_dbl(dfs, ~ filter_go_terms(.x, "RNA stability") %>% nrow())) %>%
  mutate(actin_microtubule = map_dbl(dfs, ~ filter_go_terms(.x, "actin|microtubule") %>% nrow())) %>%
  mutate(translation_regulation = map_dbl(dfs, ~ filter_go_terms(.x, "regulation of translation") %>% nrow())) %>%
  mutate(ribosome_associated = map_dbl(dfs, ~ filter_go_terms(.x, "ribosome") %>% nrow())) %>%
  mutate(synapse_localised = map_dbl(dfs, ~ filter(.x, synapse_localised == TRUE) %>% nrow())) %>%
  mutate(synapse_organization = map_dbl(dfs, ~ filter(.x, synapse_organization == TRUE) %>% nrow())) %>%
  mutate(synaptic_signalling = map_dbl(dfs, ~ filter(.x, synaptic_signalling == TRUE) %>% nrow())) %>%
  mutate(locomotorly_regulation = map_dbl(dfs, ~ filter_go_terms(.x, "locomotor") %>% nrow())) %>%
  mutate(molecular_motor_activity = map_dbl(dfs, ~ filter_go_terms(.x, "motor activity") %>% nrow())) %>%
  dplyr::select(- dfs)

gene_name_df <- overview_df %>%
  mutate(total_fly_gene_count = map_dbl(dfs, ~ nrow(.x))) %>%
  mutate(total_fly_genes = map_chr(dfs, ~ get_gene_names(.x))) %>% 
  mutate(SFARI = map_chr(dfs, ~ filter(.x, sfari_dmel == TRUE) %>% get_gene_names())) %>%
  mutate(RNA_binding = map_chr(dfs, ~ filter_go_terms(.x, "RNA binding") %>% get_gene_names())) %>%
  mutate(RNA_stability = map_chr(dfs, ~ filter_go_terms(.x, "RNA stability") %>% get_gene_names())) %>%
  mutate(actin_microtubule = map_chr(dfs, ~ filter_go_terms(.x, "actin|microtubule") %>% get_gene_names())) %>%
  mutate(translation_regulation = map_chr(dfs, ~ filter_go_terms(.x, "regulation of translation") %>% get_gene_names())) %>%
  mutate(ribosome_associated = map_chr(dfs, ~ filter_go_terms(.x, "ribosome") %>% get_gene_names())) %>%
  mutate(synapse_localised = map_chr(dfs, ~ filter(.x, synapse_localised == TRUE) %>% get_gene_names())) %>%
  mutate(synapse_organization = map_chr(dfs, ~ filter(.x, synapse_organization == TRUE) %>% get_gene_names())) %>%
  mutate(synaptic_signalling = map_chr(dfs, ~ filter(.x, synaptic_signalling == TRUE) %>% get_gene_names())) %>%
  mutate(locomotorly_regulation = map_chr(dfs, ~ filter_go_terms(.x, "locomotor") %>% get_gene_names())) %>%
  mutate(molecular_motor_activity = map_chr(dfs, ~ filter_go_terms(.x, "motor activity") %>% get_gene_names())) %>%
  dplyr::select(- dfs)

write_tsv(count_df, "~/Desktop/Dmel_interesting-GO-categories_with-FCA-support1.txt")
write_tsv(gene_name_df, "~/Desktop/Dmel_interesting-GO-categories_with-FCA-support2.txt")

```






```{r}
## 


##
plot_gene_tsne("axo", "red", 2)
plot_gene_subtype("pros")
plot_gene_ridge("pros")


```





















































